import numpy as np
import h5py
from pathlib import Path
import configparser
import matplotlib.pyplot as plt


def read_ascii(filename):
    """
    Reads an ascii generated by spice, and returns a header structure and a data table

    Parameters:

        filename (str): a string containing the filename

    Returns
        header (dict): a dictionary containing information from the commented lines
        data (numpy.array): an array containing all columns/rows
    """
    with open(filename) as f:
        all_content = f.readlines()
        header_list = [line.strip() for line in all_content if "#" in line]
        col_name_index = header_list.index("# col_headers =") + 1
        col_names = header_list[col_name_index].strip("#").split()
        header_list.pop(col_name_index)
        header_list.pop(col_name_index - 1)
    data = np.genfromtxt(filename, comments="#")
    header = dict(column_names=col_names)
    unused = list()
    for line in header_list:
        line = line.strip("# ")
        if "=" in line:
            parts = line.split("=")
            header[parts[0].strip()] = parts[1].strip()
        else:
            unused.append(line)
    header["unused_lines"] = unused
    return data, header


# def parse_header(header):
#     """
#     Parse the header

#     Parameters:
#         header

#     Returns:
#         experiment_information
#         instrument_information
#         sample_information
#         scan_information
#         unused_information
#     """
#     experiment_information=dict()
#     instrument_information=dict()
#     sample_information=dict()
#     scan_information=dict()
#     unused_information=[]
#     for line in header:
#         line = line.strip("# ")
#         parts = [p.strip() for p in line.split("=")]
#         if parts[0] in ['scan', 'date', 'time', 'command',
#                         'builtin_command', 'scan_title',
#                         'def_x', 'def_y']:
#             scan_information[parts[0]]=parts[1]
#         elif parts[0] in ['proposal', 'experiment', 'experiment_number',
#                           'users', 'local_contact']:
#             experiment_information[parts[0]]=parts[1]
#         elif parts[0] in ['monochromator', 'analyzer', 'sense', 'collimation']:
#             instrument_information[parts[0]]=parts[1]
#         elif parts[0] in ['samplename', 'sampletype', 'samplemosaic',
#                           'latticeconstants', 'ubmatrix', 'plane_normal',
#                           'ubconf']:
#             sample_information[parts[0]]=parts[1]
#         else:
#             unused_information.append(line)
#     return experiment_information, scan_information, sample_information, instrument_information, unused_information


def read_ini_to_dict(filename):
    """
    Transform any ini file into a dictionary of dictionaries

    """
    config = configparser.ConfigParser()
    config.read(filename)
    config_dict = dict()
    for s in config.sections():
        ds = dict()
        for k in config[s].keys():
            ds[k] = config[s][k]
        config_dict[s] = ds
    return config_dict


def append_ub(ub, handle):
    pass


def save_experiment(expdir, filename):
    """
    Save all data files in a folder to an hdf5 file
    """
    p = Path(expdir)
    with h5py.File(filename, "w") as f:
        grp = f.create_group("scans")
        scans = sorted((p / "Datafiles").glob("*"))
        for scan in scans:
            data, header = read_ascii(scan)
            if data.ndim == 1:
                data = data.reshape(1, -1)
            scan_entry = grp.create_group(scan.parts[-1])
            ds = scan_entry.create_dataset("data", data=data)
            for k, v in header.items():
                ds.attrs[k] = v


def read_experiment_entry(filename, entry=0):
    """
    read a single experiment entry from the hdf file
    """
    with h5py.File(filename, "r") as f:
        keys = list(f["scans"].keys())
        lk = len(keys)
        if entry >= lk:
            raise ValueError(
                f"There are only {lk} entries. Use entry between 0 and {lk-1}"
            )
        data = f["scans"][keys[entry]]["data"]
        attributes = dict()
        for attr in data.attrs:
            attributes[attr] = data.attrs[attr]
        data = data[()]
        dt = np.dtype([(a, np.float_) for a in attributes["column_names"]])
        data = np.array([tuple(xi) for xi in data], dtype=dt)
    return data, attributes


def get_entries(filename):
    """
    Return list of entries in the scan field
    """
    with h5py.File(filename, "r") as f:
        keys = list(f["scans"].keys())
    return keys


def plot_entry(
    data,
    attributes,
    ax,
    def_x=None,
    def_y=None,
    label="scan_title",
    normalization=None,
    **kwargs,
):
    if not def_x:
        def_x = attributes["def_x"]
    if not def_y:
        def_y = attributes["def_y"]
    if normalization == "default":
        normalization = attributes["preset_channel"]
    x = data[def_x]
    y = data[def_y]
    e = np.sqrt(y)
    if normalization:
        y /= data[normalization]
        e /= data[normalization]
    if label:
        label = attributes[label]
    handle = ax.errorbar(x, y, e, label=label, **kwargs)
    ax.set_xlabel(def_x)
    if normalization:
        ax.set_ylabel(f"{def_y}/{normalization}")
    else:
        ax.set_ylabel(def_y)
    return handle


def append_datasets(data1, data2, attr1, attr2):
    """ """
    column_names1 = data1.dtype.names
    column_names2 = data2.dtype.names
    common = [c for c in column_names1 if c in column_names2]
    print(column_names1)
    print(column_names2)
    print(common)


if __name__ == "__main__":
    if not Path("./tmp/test.h5").exists():
        # x, y = read_ascii('exp758/Datafiles/HB1_exp0758_scan0021.dat')
        # config = read_ini_to_dict("exp758/expconf.ini")
        save_experiment("exp758", "./tmp/test.h5")
        print("saved")
    d, a = read_experiment_entry("./tmp/test.h5", 18)
    d1, a1 = read_experiment_entry("./tmp/test.h5", 19)

    # append_datasets(d,d1,a,a1)

    fig, ax = plt.subplots()
    p1 = plot_entry(d1, a1, ax, normalization="default")
    p = plot_entry(d, a, ax, normalization="default")
    ax.legend(handles=[p1, p])
    fig.show()
